#!/bin/sh
# <UDF name="FQDN" label="The hostname for the new Linode." />
# <UDF name="AWS_ACCESS_KEY_ID" Label="AWS API Key ID" />
# <UDF name="AWS_SECRET_ACCESS_KEY" Label="AWS Secret Access Key" />
# <UDF name="AWS_REGION" Label="AWS Region" />
# <UDF name="MYSQL_ROOT_PASSWORD" Label="MySQL root user password" />
# <UDF name="MYSQL_PORT" Label="MySQL port" />
# <UDF name="MYSQL_DATABASE" Label="MySQL database schema name" />

set -ex
exec >/root/stackscript.log 2>&1
echo "Linode Variable Values:  LINODE_ID: $LINODE_ID,  LINODE_LISHUSERNAME: $LINODE_LISHUSERNAME,  LINODE_RAM: $LINODE_RAM,  LINODE_DATACENTERID:$LINODE_DATACENTERID"
source <ssinclude StackScriptID="929970">

function add_packages() {
    echo "Adding packages..."
    apk add --update ca-certificates openssl lsof procps
    update-ca-certificates --fresh
}
function setup_aws() {
    install_awscli
    echo "Setup awscli..."
    mkdir ~/.aws
  cat > ~/.aws/config <<CONFIG
[default]
region = ${AWS_REGION}
CONFIG
  cat > ~/.aws/credentials <<CREDS
[default]
aws_access_key_id = ${AWS_ACCESS_KEY_ID}
aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}
CREDS
    # Test AWS Credentials stored in Env vars
    echo $(aws sts get-caller-identity)
}
function mysql_configure() {
    echo "Configuring mysql..."
    local memory_allocate_percent=${1:-90}
    local conf_path=${2:-/etc/my.cnf.d/custom.cnf}
    local mem="$(awk '/MemTotal/ {print int($2/1024)}' /proc/meminfo)" # how much memory in MB this system has
    local mymem="$((mem*memory_allocate_percent/100))" # how much memory we'd like to tune mysql with
    local mymemchunks="$((mymem/4))" # how many 4MB chunks we have to play with
    echo -e "skip-host-cache\nskip-name-resolve\nserver-id = 1\nlog_bin = /var/log/mysql/mysql-bin.log\nbinlog_format = ROW\nbinlog_do_db = ${MYSQL_DATABASE}" >> ${conf_path}
    # mysql config options we want to set to the percentages in the second list, respectively
    local key_buffer=$(echo | awk "{print int((75 * ${mymemchunks}/100))*4}")
    local query_cache=$(echo | awk "{print int((15 * ${mymemchunks}/100))*4}")
    local myisam_sort_buffer=$(echo | awk "{print int((5 * ${mymemchunks}/100))*4}")
    echo "key_buffer_size         = ${key_buffer}M" >> ${conf_path}
    echo "query_cache_size        = ${query_cache}M" >> ${conf_path}
    echo "myisam_sort_buffer_size = ${myisam_sort_buffer}M" >> ${conf_path}
    local remaining=$(echo | awk "{print int((1 * ${mymemchunks}/100))*4}")
    [ ${remaining} -lt 8 ] && remaining=8
    echo "sort_buffer_size     = ${remaining}M" >> ${conf_path}
    echo "read_buffer_size     = ${remaining}M" >> ${conf_path}
    echo "read_rnd_buffer_size = ${remaining}M" >> ${conf_path}
    rc-service mariadb restart
    netstat -ltn
    mysql -Bse "CREATE DATABASE ${MYSQL_DATABASE};"
    mysql -Bse "GRANT REPLICATION SLAVE ON *.* TO \"root\"@\"localhost\";"
    mysql -D mysql -Bse "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}' WITH GRANT OPTION;"
    mysql -D mysql -Bse "DELETE FROM user WHERE User='root' AND Host='localhost';"
    mysql -Bse "FLUSH PRIVILEGES;"
    mysql -uroot -p"${MYSQL_ROOT_PASSWORD}" -Bse "SHOW MASTER STATUS \G;"

}
function install() {
    setup_swap ${LINODE_RAM}
    setup_hostname ${FQDN}
    setup_timezone UTC
    harden_ssh
    enable_fail2ban
    patch_os
    enable_auto_updates
    add_packages
    setup_aws
    mysql_install ${MYSQL_ROOT_PASSWORD}
    mysql_configure
    setup_firewall $(network_interface) 22 ${MYSQL_PORT}
    cat << EOT > /etc/ssh/banner
 _____      _       _       _ __
/__   \_ __(_)_   _(_) __ _| / _\ ___  ___
  / /\/ '__| \ \ / / |/ _\` | \ \ / _ \/ __|
 / /  | |  | |\ V /| | (_| | |\ \  __/ (__
 \/   |_|  |_| \_/ |_|\__,_|_\__/\___|\___|
EOT
    echo -e 'w\necho\niostat\necho\nmpstat\necho\ndf' >> ~/.profile
    echo "Stackscript finished"

}

echo "Setup PATH..."
echo 'export PATH="$PATH:/root/.local/bin"' >> ~/.profile
export PATH="$PATH:/root/.local/bin"
install
rc-status
stackscript_cleanup
echo $(date +'%F') > /root/.deployed
echo "Installation complete!"
